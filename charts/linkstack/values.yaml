# -- Specifies in which namespace linkstack release should be deployed
# Will be deployed to the default namespace if not specified
namespace: ""

nameOverride: ""
fullnameOverride: ""

# -- (int) Number of linkstack pods
replicaCount: 1

# -- Linkstack container specific configuration
linkstack:
  # -- Datastore to use (either sqlite or mysql)
  backend: sqlite
  env:
    php_memory_limit: 512M
    upload_max_filesize: '8M'
    tz: 'Europe/Paris'
    # server_admin: 'admin@example.com'
    # http_server_name: 'example.com'
    # https_server_name: 'example.com'
    log_level: 'info'
  image:
    repository: linkstackorg/linkstack
    pullPolicy: IfNotPresent
    tag: "latest"
  resources:
    limits:
      cpu: 250m
      # -- PHP_MEMORY_LIMIT should be adjusted accordingly
      memory: 512Mi
    requests:
      cpu: 250m
      memory: 512Mi
  # -- Additional volumeMounts on the output Deployment definition.
  volumeMounts:
    - name: linkstack-sqlite
      mountPath: "/htdocs"
      # SQLite & assets storage requires both RW permissions.
      readOnly: false

# -- Litestream sidecar specific configuration (sqlite disaster-recovery tool)
# This configuration won't be used if sqlite is not selected as backend.
litestream:
  enabled: false
  image:
    repository: litestream/litestream
    pullPolicy: IfNotPresent
    tag: "latest"
  resources:
    limits:
      cpu: 250m
      memory: 256Mi
    requests:
      cpu: 125m
      memory: 128Mi
  path: /htdocs/database/database.sqlite
  url: "s3://linkstack-backup/litestream"
  region: "eu-west-1"
  skipVerify: true
  volumeMounts:
    - name: linkstack-litestream
      mountPath: /etc/litestream.yml
      subPath: litestream.yml

# -- Additional volumes on the output Deployment definition.
volumes:
  - name: linkstack-sqlite
    persistentVolumeClaim:
      claimName: linkstack-sqlite-pvc
  - name: linkstack-litestream
    configMap:
      name: linkstack-litestream

serviceAccount:
  # -- Specifies whether a service account should be created
  create: true
  # -- Automatically mount a ServiceAccount's API credentials?
  automount: true
  # -- Annotations to add to the service account
  annotations: {}
  # -- The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

service:
  type: ClusterIP
  port: 80

# -- Restrict network permissions using Kubernetes L4 network policies
networkPolicy:
  enabled: false
  ports:
    - port: 443
    - port: 80

securityContext: {}
#   capabilities:
#     drop:
#     - ALL
# allowPrivilegeEscalation: false
# runAsNonRoot: true
# runAsUser: 100
# runAsGroup: 101
# fsGroup: 101
# readOnlyRootFilesystem: true

podAnnotations: {}
podLabels: {}
podSecurityContext: {}

ingress:
  enabled: false
  # -- Name of the ingress class to route through this application
  className: ""
  annotations: {}
  # hosts:
  #   - host: chart-example.local
  #     paths:
  #       - path: /
  #         pathType: ImplementationSpecific
  # tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

# -- HPA rules.
autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 10
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

# -- Assign pods to nodes matching specific label.
nodeSelector: {}

# -- Tolerations lift taint constraints with a tradeoff on scheduling guarantees.
tolerations: []

# -- Affinity rules to constrain pod scheduling to specific node(s) matching rules.
affinity: {}
